// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/ctf-api/internal/config"
	"github.com/ctf-api/internal/db"
	"github.com/ctf-api/internal/handlers"
	"github.com/ctf-api/internal/repository"
	"github.com/ctf-api/internal/server"
	"github.com/ctf-api/internal/usecase"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeServer generates the Wire dependency injection
func InitializeServer() (*server.Server, error) {
	config, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	db := database.InitDB(config)
	repositoryRepository := repository.NewRepository(db)
	usecaseUsecase := usecase.NewUsecase(repositoryRepository)
	handlersHandlers := handlers.NewHandlers(usecaseUsecase)
	teamRepository := repository.NewTeamRepository(db)
	teamUsecase := usecase.NewTeamUsecase(teamRepository)
	teamHandler := handlers.NewTeamHandler(teamUsecase)
	challengeRepository := repository.NewChallengeRepository(db)
	challengeUseCase := usecase.NewChallengeUseCase(challengeRepository)
	challengeHandler := handlers.NewChallengeHandler(challengeUseCase)
	serverServer := server.NewServer(handlersHandlers, teamHandler, challengeHandler)
	return serverServer, nil
}

// wire.go:

// ProvideConfig loads the configuration
func ProvideConfig() (config.Config, error) {
	return config.LoadConfig()
}

var providerSet = wire.NewSet(
	ProvideConfig, database.InitDB, repository.NewRepository, usecase.NewUsecase, handlers.NewHandlers, repository.NewTeamRepository, usecase.NewTeamUsecase, handlers.NewTeamHandler, handlers.NewChallengeHandler, usecase.NewChallengeUseCase, repository.NewChallengeRepository, server.NewServer,
)
